<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DmcLib.Wpf</name>
    </assembly>
    <members>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireNotifyCollectionChanged(System.Collections.Specialized.INotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fires a notify collection changed event to the provided event handlers.
            </summary>
            <param name="sender">The collection that has changed.</param>
            <param name="handler">The event handler(s) to receive the event.</param>
            <param name="args">Event arguments detailing the extent of the collection change.</param>
            <returns></returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls the static collection changed method and notifies any properties of changes.
            </summary>
            <param name="args">Event args for a collection change.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            IEnumerable&lt;T&gt; implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionReset">
            <summary>
            Generic implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.OnDisposed">
            <summary>
            Called when [disposed].  Unsbscribes all from CollectionChanged event
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.EnumerableToList``1(System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.NotifyCollectionChanged.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            IList implementation to raise a collection changed event.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.GetEntry(`0)">
            <summary>
            Gets the entry of the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.RemoveItem(`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.AddItem(`0,`1)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is added to list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
            <exception cref="T:System.ArgumentException">If key already exists in dictionary.</exception>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.SetItem(`0,`1)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.CopyItems(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableDictionary`2.FireCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Calls the static collection changed method and notifies any properties of changes.
            </summary>
            <param name="args">Event args for a collection change.</param>
        </member>
        <member name="T:CF.FlyingApp.Base.Components.ObservableHashSet`1">
            <summary>
            Represents an observable set of hashed values.
            </summary>
            <typeparam name="T">The type of elements in the hash set.</typeparam> 
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> class.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> class.
            </summary>
            <param name="comparer">The IEqualityComparer&lt;T&gt; implementation to use when comparing values in the set, or null to use the default EqualityComparer&lt;T&gt; implementation for the set type.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param>
            <param name="comparer">The IEqualityComparer&lt;T&gt; implementation to use when comparing values in the set, or null to use the default EqualityComparer&lt;T&gt; implementation for the set type.</param>
        </member>
        <member name="F:CF.FlyingApp.Base.Components.ObservableHashSet`1.BaseHashSet">
            <summary>
            Backing HashSet to store values
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.Add(`0)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>true if the element is added to the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object; false if the element is already present.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.Clear">
            <summary>
            Removes all elements from a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.
            </summary>        
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.Contains(`0)">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object contains the specified element.
            </summary>
            <param name="item">The element to locate in the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object contains the specified element; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.CopyTo(`0[])">
            <summary>
            Copies the elements of a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> collection to an array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy to array.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>        
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/>.
            </summary>
            <returns>A <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/>.Enumerator object for the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object to contain only elements that are present in that object and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a proper subset of other; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a proper superset of other; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a subset of other; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is a superset of other; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object and a specified collection share common elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object and other share at least one common element; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.Remove(`0)">
            <summary>
            Removes the specified element from a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if item is not found in the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.RemoveWhere(System.Predicate{`0})">
            <summary>
            Removes elements from the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object based on the predicate.
            </summary>
            <param name="match">The prediate to match items to be removed.</param>
            <returns>number of elements successfully matched and removed.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object. </param>
            <returns>true if the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object is equal to other; otherwise, false.</returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object to contain only elements that are present either in that object or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.TrimExcess">
            <summary>
            Sets the capacity of a <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object to contain all elements that are present in itself, the specified collection, or both.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/> object.</param>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.AddItem(`0)">
            <summary>
            Adds an item to the HashSet
            </summary>
            <param name="item">Item to be added.</param>
            <returns></returns>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.RemoveItem(`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.RemoveItemsWhere(System.Predicate{`0})">
            <summary>
            Called by base class Collection&lt;T&gt; when a selection of items are removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:CF.FlyingApp.Base.Components.ObservableHashSet`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="P:CF.FlyingApp.Base.Components.ObservableHashSet`1.Comparer">
            <summary>
            Gets the IEqualityComparer&lt;T&gt; object that is used to determine equality for the values in the set.
            </summary>
        </member>
        <member name="P:CF.FlyingApp.Base.Components.ObservableHashSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:CF.FlyingApp.Base.Components.ObservableHashSet`1"/>.
              </returns>
        </member>
        <member name="P:CF.FlyingApp.Base.Components.ObservableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:DmcLib.Wpf.Commands.AsyncRelayCommand">
            <summary>
            Async relay command implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface. 
            Allows commands to be executed off of the calling thread. Commands can either run in parallel or one at a time
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Commands.RelayCommand">
            <summary>
            Relay command implementation of the <see cref="T:System.Windows.Input.ICommand"/> interface.  This is used by all View Models.
            </summary>
        </member>
        <member name="F:DmcLib.Wpf.Commands.RelayCommand._execute">
            <summary>
            The Action to be executed
            </summary>
        </member>
        <member name="F:DmcLib.Wpf.Commands.RelayCommand._canExecute">
            <summary>
            The predicate determining if <see cref="F:DmcLib.Wpf.Commands.RelayCommand._execute"/> action can occur.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Commands.RelayCommand"/> class.
            </summary>
            <param name="execute">The action to be executed.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Commands.RelayCommand"/> class.
            </summary>
            <param name="execute">The action to be executed.</param>
            <param name="canExecute">The predite determining if the execution action can be executed.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.RelayCommand.SetCanExecute(System.Predicate{System.Object})">
            <summary>
            Sets the can execute.
            </summary>
            <param name="canExecute">The can execute.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="E:DmcLib.Wpf.Commands.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.AsyncRelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Commands.AsyncRelayCommand"/> class.
            </summary>
            <param name="execute">The action to be executed.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.AsyncRelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Commands.AsyncRelayCommand"/> class.
            </summary>
            <param name="execute">The action to be executed.</param>
            <param name="canExecute">The predite determining if the execution action can be executed.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.AsyncRelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged">
            <summary>
            Concurrent (async/await) implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.AreValuesEqual``1(``0,``0)">
            <summary>
            Check if the two values are equal.
            </summary>
            <typeparam name="T">Type of value being compared</typeparam>
            <param name="original">The original value.</param>
            <param name="value">The new value.</param>
            <returns>Returns <c>true</c> if the two values are equal and <c>false</c> if they are not.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets a property to a new value and fires the PropertyChanged event.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="original">The original property value.</param>
            <param name="value">The new value.</param>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the property is set and the property changed event fires. Returns <c>false</c> if <paramref name="original"/> equals <paramref name="value"/>.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.FirePropertyChanged(System.String)">
            <summary>
            Fires the property changed event for the <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property being changed.</param>
            <returns>Returns <c>true</c> if the event is fired successfully. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.OnDisposed">
            <summary>
            Called when [disposed].
            </summary>
        </member>
        <member name="E:DmcLib.Wpf.Concurrent.ConcurrentNotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Concurrent.UIDispatcher">
            <summary>
            Helper class to run operations on the UI thread using the Dispatcher
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.Invoke(System.Action)">
            <summary>
            Invokes the specified action on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.Invoke``1(System.Action{``0},``0)">
            <summary>
            Invokes the specified action on the UI thread with the provided generic argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Invokes the specified action on the UI thread and returns the result of the function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The function.</param>
            <returns>The result of the function.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.InvokeAsync(System.Action)">
            <summary>
            Invokes the action on the UI thread but returns a Task.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.InvokeAsync``1(System.Action{``0},``0)">
            <summary>
            Invokes the action on the UI thread with the provided argument but returns a Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
            Invokes the function on the UI thread with the provided argument but returns a Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>An awaitable generic Task.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.BeginInvoke(System.Action)">
            <summary>
            Begins the action on the UI thread and returns an awaitable DispatcherOperation.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable DispatcherOperation.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.BeginInvoke``1(System.Action{``0},``0)">
            <summary>
            Begins the action on the UI thread with the given argument and returns an awaitable DispatcherOperation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The argument.</param>
            <returns>An awaitable DispatcherOperation</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.BeginInvokeAsync(System.Action)">
            <summary>
            Begins the action on the UI thread with the provided argument but returns a Task.
            </summary>
            <param name="action">The action.</param>
            <returns>An awaitable Task.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.BeginInvoke``1(System.Func{``0})">
            <summary>
            Invokes the function asynchronously on the UI thread and returns the result synchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>The return type of the function.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Concurrent.UIDispatcher.BeginInvokeAsync``1(System.Func{``0})">
            <summary>
            Begins the action on the UI thread with the provided argument but returns a generic Task.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns>An awaitable generic Task.</returns>
        </member>
        <member name="T:DmcLib.Wpf.DmcApp">
            <summary>
            Standard DMC implementation of the Application class
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.DmcApp"/> class.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.DmcApp"/> class.
            Sets up unhandled exceptions, the application GUID. Determines if an applcation of the same type is already running.
            Shows a splash screen, executes Start, waits for Start logic to finish then displays the main window.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.PreInitialize">
            <summary>
            Perform any initialization that needs to be performed before the splash screen is displayed
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.Compose(System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
            <summary>
            Composes the specified catalogs.
            </summary>
            <param name="catalogs">The catalogs.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.Compose(System.Collections.Generic.IEnumerable{System.Object},System.ComponentModel.Composition.Primitives.ComposablePartCatalog[])">
            <summary>
            Composes the specified parts.
            </summary>
            <param name="parts">The parts.</param>
            <param name="catalogs">The catalogs.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.CreateSplashScreen">
            <summary>
            Creates the splash screen. [Overridable]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.GetRootDirectoryPath">
            <summary>
            Returns the root directory for the logs/data folders [Overrideable]
            </summary>
            <returns></returns>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.CreateDefaultDirectories(System.String,System.String)">
            <summary>
            Creates the default directories.
            </summary>
            <param name="logsFolder">The logs folder.</param>
            <param name="dataFolder">The data folder.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.CreateDefaultDirectories(System.String,System.String,System.String)">
            <summary>
            Creates the default directories.
            </summary>
            <param name="root">The root.</param>
            <param name="logsFolder">The logs folder.</param>
            <param name="dataFolder">The data folder.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.SetBinFolder(System.String)">
            <summary>
            Sets the bin folder.
            </summary>
            <param name="subFolder">The sub folder.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.SetBinDirectory(System.String)">
            <summary>
            Sets the bin directory.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the AssemblyResolve event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:DmcLib.Wpf.DmcApp.OnExit(System.Windows.ExitEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Application.Exit" /> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.ExitEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:DmcLib.Wpf.DmcApp.SingleInstanceErrorMessage">
            <summary>
            The error message to display if an instance is already running
            </summary>
        </member>
        <member name="P:DmcLib.Wpf.DmcApp.SingleInstanceErrorCaption">
            <summary>
            The window caption to display if an instance is already running (optional)
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Controls.ListBoxExtenders">
            <summary>
            This class contains a few useful extenders for the ListBox
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Controls.ListBoxExtenders.GetAutoScrollToEnd(System.Windows.DependencyObject)">
            <summary>
            Returns the value of the AutoScrollToEndProperty
            </summary>
            <param name="obj">The dependency-object whichs value should be returned</param>
            <returns>The value of the given property</returns>
        </member>
        <member name="M:DmcLib.Wpf.Controls.ListBoxExtenders.SetAutoScrollToEnd(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the AutoScrollToEndProperty
            </summary>
            <param name="obj">The dependency-object whichs value should be set</param>
            <param name="value">The value which should be assigned to the AutoScrollToEndProperty</param>
        </member>
        <member name="M:DmcLib.Wpf.Controls.ListBoxExtenders.OnAutoScrollToEndChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method will be called when the AutoScrollToEnd
            property was changed
            </summary>
            <param name="s">The sender (the ListBox)</param>
            <param name="e">Some additional information</param>
        </member>
        <member name="T:DmcLib.Wpf.Commands.ThrowExceptionCommand">
            <summary>
            Command used to throw an exception
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Commands.CommandBase">
            <summary>
            Base implementation of <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.CommandBase.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:DmcLib.Wpf.Commands.CommandBase.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:DmcLib.Wpf.Commands.CommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.ThrowExceptionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <exception cref="T:System.ApplicationException">
            New Exception from Test Command
            </exception>
        </member>
        <member name="T:DmcLib.Wpf.Commands.WindowCloseChildrenCommand">
            <summary>
            Command to close all of a window's children
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Commands.WindowCommand">
            <summary>
            Generic command used on a window
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCommand.CheckCanExecute(System.Windows.Window)">
            <summary>
            Checks the can execute.
            </summary>
            <param name="window">The window.</param>
            <returns></returns>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCommand.OnExecute(System.Windows.Window)">
            <summary>
            Called when [execute].
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCloseChildrenCommand.OnExecute(System.Windows.Window)">
            <summary>
            Called when [execute] occurs.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:DmcLib.Wpf.Commands.WindowCloseCommand">
            <summary>
            Command used to close a window
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.WindowCloseCommand.OnExecute(System.Windows.Window)">
            <summary>
            Close the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:DmcLib.Wpf.Commands.ShowNewDialogCommand">
            <summary>
            Command used to show a new window
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Commands.ShowNewDialogCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:DmcLib.Wpf.Commands.ShowNewDialogCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:DmcLib.Wpf.Commands.ShowNewDialogCommand.GetIsExecutable(System.Object)">
            <summary>
            Determines if the command is executable.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="T:DmcLib.Wpf.DmcDesign">
            <summary>
            DMC class used for ensuring designer functionality.
            </summary>
        </member>
        <member name="P:DmcLib.Wpf.DmcDesign.IsDesignTime">
            <summary>
            Gets a value indicating whether this instance is design time.
            </summary>
            <value>
            <c>true</c> if this instance is design time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DmcLib.Wpf.Events.IWeakEventHandler`1">
            <summary>
            An interface for a weak event handler
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="T:DmcLib.Wpf.Events.IWeakPropertyChangedEventHandler">
            <summary>
            An interface for a weak event handler
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Events.WeakEventHandler`2">
            <summary>
            A handler for an event that doesn't store a reference to the source
            handler must be an instance method
            </summary>
            <typeparam name="TClass"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="T:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3">
            <summary>
            A handler for an event that doesn't store a reference to the source
            handler must be an instance method
            </summary>
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="THandler">The type of the handler.</typeparam>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3.#ctor(`2,DmcLib.Wpf.Events.UnregisterDelegate{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3"/> class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="unregister">The unregister.</param>
            <exception cref="T:System.Exception">Event handler is not of delegate type.</exception>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3.op_Implicit(DmcLib.Wpf.Events.WeakEventHandlerGeneric{`0,`1,`2})~`2">
            <summary>
            Performs an implicit conversion from WeakEventHandler to System.EventHandler
            </summary>
            <param name="weh">The weh.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3.CastDelegate(System.Delegate)">
            <summary>
            Casts the delegate.
            Taken from
            http://jacobcarpenters.blogspot.com/2006/06/cast-delegate.html
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="P:DmcLib.Wpf.Events.WeakEventHandlerGeneric`3.Handler">
            <summary>
            Gets the handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventHandler`2.#ctor(System.EventHandler{`1},DmcLib.Wpf.Events.UnregisterDelegate{System.EventHandler{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:DmcLib.Wpf.Events.WeakEventHandler`2"/> class.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="unregister">The unregister.</param>
        </member>
        <member name="T:DmcLib.Wpf.Events.WeakEventUtils">
            <summary>
            Adapted from: http://stackoverflow.com/questions/1089309/weak-events-in-net
            and: http://diditwith.net/PermaLink,guid,aacdb8ae-7baa-4423-a953-c18c1c7940ab.aspx
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventUtils.MakeWeak(System.ComponentModel.PropertyChangedEventHandler,DmcLib.Wpf.Events.UnregisterDelegate{System.ComponentModel.PropertyChangedEventHandler})">
            <summary>
            Makes a property change handler weak
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="unregister">The unregister.</param>
            <returns></returns>
        </member>
        <member name="M:DmcLib.Wpf.Events.WeakEventUtils.MakeWeak``1(System.EventHandler{``0},DmcLib.Wpf.Events.UnregisterDelegate{System.EventHandler{``0}})">
            <summary>
            Makes a generic handler weak
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="unregister">The unregister.</param>
            <returns></returns>
        </member>
        <member name="T:DmcLib.Wpf.Events.WeakPropertyChangeHandler`1">
            <summary>
            A handler for an event that doesn't store a reference to the source
            handler must be a instance method
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="T:DmcLib.Wpf.UserControls.EventLogDataGrid">
            <summary>
            Interaction logic for EventLogDataGrid.xaml
            </summary>
            <summary>
            EventLogDataGrid
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.UserControls.EventLogDataGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.ViewModels.DmcViewModel">
            <summary>
            Generic DMC View Model class
            </summary>
        </member>
        <member name="P:DmcLib.Wpf.ViewModels.DmcViewModel.IsDebug">
            <summary>
            Gets a value indicating whether this instance is debug.
            </summary>
            <value>
              <c>true</c> if this instance is debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DmcLib.Wpf.ViewModels.DmcViewModel.IsDesignTime">
            <summary>
            Gets a value indicating whether this instance is design time.
            </summary>
            <value>
            <c>true</c> if this instance is design time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DmcLib.Wpf.ViewModels.DmcViewModel.AppVersion">
            <summary>
            Gets a string representation of the main executable's version.
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.UserControls.ProgressPanel">
            <summary>
            Interaction logic for ProgressPanel.xaml
            </summary>
            <summary>
            ProgressPanel
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.UserControls.ProgressPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.UserControls.ProgressWheel">
            <summary>
            Interaction logic for ProgressWheel.xaml
            </summary>
            <summary>
            ProgressWheel
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.UserControls.ProgressWheel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.UserControls.LabeledValue">
            <summary>
            Interaction logic for LabeledValue.xaml
            </summary>
            <summary>
            LabeledValue
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.UserControls.LabeledValue.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Windows.AboutWindow">
            <summary>
            Interaction logic for AboutWindow.xaml
            </summary>
            <summary>
            AboutWindow
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Windows.AboutWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.ListBoxExtenders">
            <summary>
            This class contains a few useful extenders for the ListBox
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.ListBoxExtenders.GetAutoScrollToEnd(System.Windows.DependencyObject)">
            <summary>
            Returns the value of the AutoScrollToEndProperty
            </summary>
            <param name="obj">The dependency-object whichs value should be returned</param>
            <returns>The value of the given property</returns>
        </member>
        <member name="M:DmcLib.Wpf.ListBoxExtenders.SetAutoScrollToEnd(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the AutoScrollToEndProperty
            </summary>
            <param name="obj">The dependency-object whichs value should be set</param>
            <param name="value">The value which should be assigned to the AutoScrollToEndProperty</param>
        </member>
        <member name="M:DmcLib.Wpf.ListBoxExtenders.OnAutoScrollToEndChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method will be called when the AutoScrollToEnd
            property was changed
            </summary>
            <param name="s">The sender (the ListBox)</param>
            <param name="e">Some additional information</param>
        </member>
        <member name="T:DmcLib.Wpf.UserControls.ProgressWheelWedge">
            <summary>
            Interaction logic for ProgressWheelWedge.xaml
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.UserControls.ProgressWheelWedge.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DmcLib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DmcLib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DmcLib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DmcLib.Wpf.Windows.PlainSplashScreen">
            <summary>
            Interaction logic for PlainSplashScreen.xaml
            </summary>
            <summary>
            PlainSplashScreen
            </summary>
        </member>
        <member name="M:DmcLib.Wpf.Windows.PlainSplashScreen.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
